var documenterSearchIndex = {"docs":
[{"location":"#Comonicon","page":"Home","title":"Comonicon","text":"","category":"section"},{"location":"#Reference","page":"Home","title":"Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [Comonicon]","category":"page"},{"location":"#Comonicon.codegen-Tuple{Any}","page":"Home","title":"Comonicon.codegen","text":"codegen(x)\n\nGenerates Julia AST and wrap them in the entry function command_main for the given command object x.\n\n\n\n\n\n","category":"method"},{"location":"#Comonicon.command","page":"Home","title":"Comonicon.command","text":"command(module; name=\"\", doc=docstring(m))\n\nConvert a module to a CLI command NodeCommand.\n\ncommand(f::Function, args, kwargs; name=\"\")\n\nConvert a function to a CLI command LeafCommand. It requires a Vector of function arguments and a Vector of function kwargs.\n\nThe element of arguments vector is a tuple (name, type, require):\n\nname::String is the name of argument\ntype::DataType is the type of this argument, can be Any if you don't want to specify\nrequire::Bool indicates the whether this argument is required.\n\nThe element of kwargs vector is also a tuple (name, type, short):\n\nname::String is the name of kwarg\ntype::DataType is the type of this kwarg, can be Any if you don't want to specify\nshort::Bool is a flag that indicates whether this kwarg has short option.\n\n\n\n\n\n","category":"function"},{"location":"#Comonicon.print_cmd","page":"Home","title":"Comonicon.print_cmd","text":"print_cmd([io, ]cmd)\n\nPrint a command object. This is used to generate command help.\n\n\n\n\n\n","category":"function"},{"location":"#Comonicon.splittext-Tuple{Any}","page":"Home","title":"Comonicon.splittext","text":"splittext(s)\n\nSplit the text in string s into an array, but keep all the separators attached to the preceding word.\n\nnote: Note\nthis is copied from Luxor/text.jl\n\n\n\n\n\n","category":"method"},{"location":"#Comonicon.@cast-Tuple{Any}","page":"Home","title":"Comonicon.@cast","text":"@cast <expr>\n\nCast a Julia expression to a CLI command. Valid Julia expression can be functions or modules.\n\n\n\n\n\n","category":"macro"},{"location":"#Comonicon.@command_main-Tuple","page":"Home","title":"Comonicon.@command_main","text":"@command_main [name=<default name>] [version=\"0.0.0\"] [doc=\"\"]\n\nThe main entry of your command.\n\n@command_main <function expr>\n\nWhen use in front of a function expression it will treat this function as the only command you want to cast and it behaves like @cast.\n\n\n\n\n\n","category":"macro"}]
}
