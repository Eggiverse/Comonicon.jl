module PATH
using Libdl

project(m::Module, xs...) = joinpath(dirname(dirname(pathof(m))), xs...)
project(xs...) = project(Comonicon, xs...)

function default_sysimg()
    lib = project("deps", "lib", "libcomonicon.$(Libdl.dlext)")
    if isfile(lib)
        return lib
    else
        return
    end
end

default_exename() = joinpath(Sys.BINDIR, Base.julia_exename())

end

function cmd_script(mod; exename=PATH.default_exename(), project=PATH.project(mod), sysimg=PATH.default_sysimg(), compile=nothing, optimize=2)
    shebang = "#!$exename --project=$project"

    if sysimg !== nothing
        shebang *= "-J$sysimg"
    end

    if compile in [:yes, :no, :all, :min]
        shebang *= " --compile=$compile"
    end

    shebang *= " -O$optimize"
    return """$shebang
    using $mod; $mod.command_main()
    """
end

function precompile_script(mod::Module)
    script = "using $mod; $mod.command_main([\"-h\"]);\n"
 
    if isdefined(mod, :CASTED_COMMANDS)
        for (name, cmd) in mod.CASTED_COMMAND
            script *= precompile_script(mod, cmd)
        end
    end
    return script
end

function precompile_script(mod, cmd::LeafCommand)
    return "$mod.command_main([\"$(cmd_name(cmd))\", \"-h\"]);\n"
end

function precompile_script(mod, cmd::NodeCommand)
    return join(map(x->precompile_script(mod, x), cmd.subcmds))
end

function install(mod::Module, name=default_name(mod);
        bin=joinpath(first(DEPOT_PATH), "bin"),
        exename=PATH.default_exename(),
        project=PATH.project(mod),
        sysimg::Bool=false,
        compile=nothing,
        optimize=2)

    if sysimg
        if !ispath(PATH.project(mod, "deps", "lib"))
            mkpath(PATH.project(mod, "deps", "lib"))
        end

        precompile_file = PATH.project(mod, "deps", "precompile.jl")
        open(precompile_file, "w+") do f
            print(f, precompile_script(mod))
        end

        sysimg_path = PATH.project(mod, "deps", "lib", "lib$name.$(Libdl.dlext)")
        create_sysimage(nameof(mod);
            sysimage_path=sysimg_path,
            project=project, precompile_execution_file=precompile_file
        )
    else
        sysimg_path = nothing
    end

    script = cmd_script(mod; exename=exename, project=project, sysimg=sysimg_path, compile=compile, optimize=optimize)
    file = joinpath(bin, name)

    if !ispath(bin)
        @info "cannot find Julia bin folder creating .julia/bin"
        mkpath(bin)
    end

    @info "generating $file"
    open(file, "w+") do f
        println(f, script)
    end

    chmod(file, 0o777)
    return
end

function Base.write(io::IO, x::EntryCommand; exec=false)
    println(io, "#= generated by Comonicon =#")
    println(io, rm_lineinfo(codegen(x)))
    if exec
        println(io, "command_main()")
    end
end

function build()
    if !ispath(project("deps", "lib"))
        mkpath(project("deps", "lib"))
    end

    create_sysimage([:Comonicon, :Test];
        sysimage_path=project("deps", "lib", "libcomonicon.$(Libdl.dlext)"),
        project=project(), precompile_execution_file=project("test", "runtests.jl")
    )
end
